/* -----------------------------------------------------------------------------
  Filename:     appdesc.h
  Description:  Interface towards the application used by CANdesc.
                
                Manufacturer: Vector
                EcuDocFile:   C:\work\pr4\bms\nightwing\sw\mmc\proto\mmc_cfg\mmc.cdd
                Variant:      Common_Diagnostics

  Generated by  CANdelaGen Wed Feb 25 17:50:13 2015
 
 ----------------------------------------------------------------------------- */
/* -----------------------------------------------------------------------------
  C O P Y R I G H T
 -------------------------------------------------------------------------------
  Copyright (c) 2001-2006 by Vector Informatik GmbH. All rights reserved.
 
  This software is copyright protected and proprietary to Vector Informatik 
  GmbH.
  
  Vector Informatik GmbH grants to you only those rights as set out in the 
  license conditions.
  
  All other rights remain with Vector Informatik GmbH.
 -------------------------------------------------------------------------------
 ----------------------------------------------------------------------------- */

#if !defined(__APPDESC_H__)
#define __APPDESC_H__

/* -----------------------------------------------------------------------------
    &&&~ Configuration switches
 ----------------------------------------------------------------------------- */

#if !defined(__DESC_H__)
# error "Include sequence error! You must include desc.h before appDesc.h."
#endif



/* -----------------------------------------------------------------------------
    &&&~ Preprocessor constants (defines)
 ----------------------------------------------------------------------------- */

/* This magic number provides inter CANdesc generation process consistency check.All CANdesc files must have the same one. */
#define DESC_APPLICATION_INTERFACE_MAGIC_NUMBER                      24158


/* -----------------------------------------------------------------------------
    &&&~ Function prototypes
 ----------------------------------------------------------------------------- */

#if defined (DESC_ENABLE_DEBUG_USER ) || defined (DESC_ENABLE_DEBUG_INTERNAL)
/* Assertion function for better integration support. */
void DESC_API_CALLBACK_TYPE ApplDescFatalError(vuint8 errorCode, vuint16 lineNumber);
#endif

void DESC_API_CALLBACK_TYPE ApplDescOnTransitionSession(DescStateGroup newState, DescStateGroup formerState);
void DESC_API_CALLBACK_TYPE ApplDescOnTransitionSecurityAccess(DescStateGroup newState, DescStateGroup formerState);
void DESC_API_CALLBACK_TYPE ApplDescRead_Diagnostic_DataEmissions(DescMsgContext* pMsgContext); /* Request length check can not be performed. Please, implement length check in your Main-Handler!! */
void DESC_API_CALLBACK_TYPE ApplDescRead_Freeze_Frame_DataEmissions(DescMsgContext* pMsgContext); /* Request length check can not be performed. Please, implement length check in your Main-Handler!! */
void DESC_API_CALLBACK_TYPE ApplDescRead_Emissions_DTCsEmissions(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescClear_Emissions_DTCsEmissions(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescRead_Current_Emissions_DTCsEmissions(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescRead_Vehicle_InfoEmissions(DescMsgContext* pMsgContext); /* Request length check can not be performed. Please, implement length check in your Main-Handler!! */
void DESC_API_CALLBACK_TYPE ApplDescRead_Permanent_Emission_DTCsEmissions(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescResetHard_Reset(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescResetSoft_Reset(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescClearFaultMemory(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadNumberFaultMemory(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadAllIdentifiedFaultMemory(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadEnvironmentDataFaultMemory(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescRead_extendedFaultMemory(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadAllSupportedFaultMemory(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescWriteFingerprint(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStartLearn_VIN(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStartCheck_Checksum(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStartCheck_Programming_Preconditions(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStartDecrease_Failed_Security_Access_Counter(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStartSOC_Learning(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStartVTBM_Reprogramming(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStartReset_Contactor_Wear(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStartSOH_Learning_Phase_1(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStartSOH_Learning_Phase_2(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStartSOH_Learning_Phase_3(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStartErase_Memory(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStartCheck_Programming_Dependencies(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStopSOH_Learning_Phase_1(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStopSOH_Learning_Phase_2(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescStopSOH_Learning_Phase_3(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescResultsVTBM_Reprogramming(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescResultsSOH_Learning_Phase_1(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescResultsSOH_Learning_Phase_2(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescResultsSOH_Learning_Phase_3(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescRequestDownload(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescTransmitDownload(DescMsgContext* pMsgContext); /* Request length check can not be performed. Please, implement length check in your Main-Handler!! */
void DESC_API_CALLBACK_TYPE ApplDescStopDownload(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescSendTurn_DTC_Setting_On(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescSendTurn_DTC_Setting_Off(DescMsgContext* pMsgContext);
/* Application condition checks */
void DESC_API_CALLBACK_TYPE ApplDescCheckCommCtrl(DESC_CONTEXT_FORMAL_PARAM_DEF_FIRST DescOemCommControlInfo *commControlInfo);

#if defined (DESC_ENABLE_COMM_CTRL_SUBNET_SUPPORT)
void DESC_API_CALLBACK_TYPE ApplDescSetCommMode(DescOemCommControlInfo *commControlInfo);
#endif

#if defined (DESC_ENABLE_RX_COMM_CONTROL)
void DESC_API_CALLBACK_TYPE ApplDescSetCommModeOnRxPath(DescOemCommControlInfo *commControlInfo);
#endif

/* Notification functions */
void DESC_API_CALLBACK_TYPE ApplDescOnCommunicationDisable(void);
void DESC_API_CALLBACK_TYPE ApplDescOnCommunicationEnable(void);

void DESC_API_CALLBACK_TYPE ApplDescCheckSessionTransition(DescStateGroup newState, DescStateGroup formerState);
/* application function which returns a randomly generated value each time it is called 
 * (e.g. current free running timer value)
 */
void ApplDescSecurityAccessGetSeed(DescSecurityAccessContext* pDescSecurityAccessContext);
/* application function which must evaluate the received key and confirm its validity.
 */
void ApplDescSecurityAccessCheckKey(DescSecurityAccessContext* pDescSecurityAccessContext);

void DESC_API_CALLBACK_TYPE ApplDescReadFault_Memory_Status(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadECU_Diagnostic_State(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVehicle_Positive_Contactor_Opening_Current_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCharger_Positive_Contactor_Opening_Current_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Temperature_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCurrent_SOC(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadState_of_Balance(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCurrent_State_of_Health(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCurrent_Lowest_Cell_Temperature(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Number_with_Current_Lowest_Cell_Temperature(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCurrent_Highest_Cell_Temperature(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Number_with_Current_Highest_Cell_Temperature(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCurrent_Lowest_Cell_Voltage(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Number_with_Current_Lowest_Cell_Voltage(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCurrent_Highest_Cell_Voltage(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Number_with_Current_Highest_Cell_Voltage(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadHighest_Cell_Temperature_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Number_with_Highest_Cell_Temperature_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadLowest_Cell_Temperature_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Number_with_Lowest_Cell_Temperature_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadOperating_Mode_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadRegen_Energy_Wh_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCharging_Energy_Wh_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVehicle_Energy_Wh_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVTBM_Active_Balancing_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVTBM_Passive_Balancing_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadNumber_of_Cells_Being_Actively_Balanced_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadNumber_of_Cells_Being_Passively_Balanced_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadHighest_Coolant_Inlet_Temperature_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadLowest_Coolant_Inlet_Temperature_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCurrent_Inlet_Coolant_Temperature(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadNumber_of_Charger_Contactor_Closing_Operations(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadNumber_of_Vehicle_Contactor_Closing_Operations(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadDelta_Cell_Temperature_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadDelta_Cell_Voltage_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadLowest_SOC_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadNumber_of_Successful_Charge_Cycles(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadNumber_of_HVIL_Broken_While_Contactors_Closed(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadNumber_of_HVIL_Broken_While_Contactors_Open(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVHybridBattery(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadIActual(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadPDischargeMaxShortTerm(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadIDischargeMaxShortTerm(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadIChargeMaxShortTerm(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadPChargeMaxShortTerm(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadNBatterySOCDesired(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadPDischargeMaxMediumTerm(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadIDischargeMaxMediumTerm(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadIChargeMaxMediumTerm(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadPChargeMaxMediumTerm(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadIDischargeMaxLongTerm(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadPDischargeMaxLongTerm(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadIChargeMaxLongTerm(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadPChargeMaxLongTerm(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVPackDCLink(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadIRaw(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadN_NMSleepBMS(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadDIDs(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVehicle_Negative_Contactor_Opening_Current_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVehicle_Pre_charge_Contactor_Opening_Current_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCharger_Negative_Contactor_Opening_Current_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadReference_State_of_Health(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVehicle_Bus_Positive_Rail_Voltage(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVehicle_Bus_Negative_Rail_Voltage(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCharger_Bus_Positive_Rail_Voltage(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCharger_Bus_Negative_Rail_Voltage(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadLast_Estimated_Balance_at_Top_of_Charge(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadLast_Estimated_Balance_at_Bottom_of_Charge(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadLast_Estimated_Balance_at_Top_of_Charge_Timestamp(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadLast_Estimated_Balance_at_Bottom_of_Charge_Timestamp(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadNumber_of_Ignition_Cycles(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadSOC_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVehicle_Bus_Current_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCharger_Bus_Current_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadPrecharge_Contactor_Wear_Counter(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVehicle_Bus_Positive_Contactor_Wear_Counter(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVehicle_Bus_Negative_Contactor_Wear_Counter(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCharger_Bus_Positive_Contactor_Wear_Counter(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCharger_Bus_Negative_Contactor_Wear_Counter(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadHighest_SOC_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadHighest_Cell_Voltage_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Number_with_Highest_Cell_Voltage_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadLowest_Cell_Voltage_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Number_with_Lowest_Cell_Voltage_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadHighest_Outlet_Coolant_Temperature_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadLowest_Outlet_Coolant_Temperature_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadHighest_Coolant_Temperature_Delta_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadHighest_Charge_Current_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadHighest_Discharge_Current_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCurrent_Outlet_Coolant_Temperature(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCurrent_BMS_Timestamp(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Storage_Temperature_Table(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadHighest_Cell_Storage_Temperature_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Number_with_Highest_Cell_Storage_Temperature_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadLowest_Cell_Storage_Temperature_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Number_with_Lowest_Cell_Storage_Temperature_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadTotal_Energy_Throughput(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadHighest_Operational_Cell_Voltage_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Number_with_Highest_Operational_Cell_Voltage_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadOperational_Lowest_Cell_Voltage_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCell_Number_with_Lowest_Operational_Cell_Voltage_Ever(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadTotal_Vehicle_Energy(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadTotal_Regen_Energy(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadTotal_Charger_Energy(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadSOCcHigh(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadSOCcLow(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadSOC_Reset_State(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadSOC_Reset_Timer(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadID_Block(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadFingerprint(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadBoot_Software_ID(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadApplication_Software_ID(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCalibration_Data_ID(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadBoot_Software_Fingerprint(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadApplication_Software_Fingerprint(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadCalibration_Data_Fingerprint(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadECU_Manufacturing_Date(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadECU_Serial_Number(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadVIN(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadHardware_ID(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadSystem_Supplier_ECU_Hardware_Version_Number(DescMsgContext* pMsgContext);
void DESC_API_CALLBACK_TYPE ApplDescReadPack_Serial_Number(DescMsgContext* pMsgContext);
#if defined (DESC_ENABLE_MULTI_CFG_SUPPORT)
/* Additionaly reject a supported PID (multi ECU configuration) */
DescBool ApplDescIsDataIdSupported(vuint16 pid);
#endif



#endif /* __APPDESC_H__ */
